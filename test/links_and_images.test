```
_basic _link__[a_b_]

[a_b_]: url
.
<p><a href="url">basic <em>link</em></a></p>
```

```
_basic _image__![a_b_]

[a_b_]: url
.
<p><img alt="basic image" src="url"></p>
```

```
_link_[]

[link]: url
.
<p><a href="url">link</a></p>
```

```
_link_[]

[link]:
 url
.
<p><a href="url">link</a></p>
```

The URL can be split over multiple lines:

```
_link_[]

[link]:
 url
  andurl
.
<p><a href="urlandurl">link</a></p>
```

```
_link_(url
andurl)
.
<p><a href="urlandurl">link</a></p>
```

```
_link_[]

[link]:
[link2]: url
.
<p><a href="">link</a></p>
```

```
_link_[]
_link_[link2]

[link2]:
  url2
[link]:
 url
.
<p><a href="url">link</a>
<a href="url2">link</a></p>
```

```
_link_[a and
b]

[a and b]: url
.
<p><a href="url">link</a></p>
```

If the reference isn't found, we get an empty link.

```
_link_[a and
b]
.
<p><a>link</a></p>
```

Reference definitions can't have line breaks in the key:

```
_link_[a and
b]

[a and
b]: url
.
<p><a>link</a></p>
<p>[a and
b]: url</p>
```

No case normalization is done on reference definitions:

```
_Link_[]

[link]: /url
.
<p><a>Link</a></p>
```

Attributes on reference definitions get transferred to
the link:

```
{title=foo}
[ref]: /url

_ref_[]
.
<p><a href="/url" title="foo">ref</a></p>
```

Attributes on the link override those on references:

```
{title=foo}
[ref]: /url

_ref_[]{title=bar}
.
<p><a href="/url" title="bar">ref</a></p>
```

```
_link _and_ link_[]

[link and link]: url
.
<p><a href="url">link <em>and</em> link</a></p>
```

```
_basic _image__!(url)
.
<p><img alt="basic image" src="url"></p>
```

```
__image_!(img.jpg)_(url)
.
<p><a href="url"><img alt="image" src="img.jpg"></a></p>
```

```
_unclosed_(hello *a
b*
.
<p>_unclosed_(hello <strong>a
b</strong></p>
```

Note that soft breaks are ignored, so long URLs
can be split over multiple lines:
```
_closed_(hello *a
b*)
.
<p><a href="hello *ab*">closed</a></p>
```

Here the strong takes precedence over the link because it
starts first:
```
*_closed_(hello*)
.
<p><strong>_closed_(hello</strong>)</p>
```

Avoid this with a backslash escape:
```
*_closed_(hello\*)
.
<p>*<a href="hello*">closed</a></p>
```

Link in link?
```
__foo_(bar)_(baz)
.
<p><a href="baz"><a href="bar">foo</a></a></p>
```

Link in image?
```
__link_(url)_!(img)
.
<p><img alt="link" src="img"></p>
```

Image in link?
```
__image_!(img)_(url)
.
<p><a href="url"><img alt="image" src="img"></a></p>
```

Autolinks:
```
<http://example.com/foo>
<me@example.com>
.
<p><a href="http://example.com/foo">http://example.com/foo</a>
<a href="mailto:me@example.com">me@example.com</a></p>
```

Openers inside `[..](` or `[..][` or `[..]{` can't match
outside them, even if the construction doesn't turn out to be
a link or span or image.

```
_x\_y_(x_y)
.
<p><a href="x_y">x_y</a></p>
```

```
_x\_y_(x_
.
<p>_x_y_(x_</p>
```

```
[x_y]{.bar_}
.
<p><span class="bar_">x_y</span></p>
```

